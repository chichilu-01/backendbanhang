import express from "express";
import { query } from "../db.js";
import verifyToken from "../middleware/verifyToken.js";

const router = express.Router();

//
// üì¶ L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ S·∫¢N PH·∫®M
// GET /api/products
//
router.get("/", async (_req, res) => {
  try {
    const rows = await query("SELECT * FROM products ORDER BY id DESC");
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói khi truy v·∫•n s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m" });
  }
});

//
// üîç G·ª¢I √ù T√åM KI·∫æM
// GET /api/products/suggest?keyword=ao
//
router.get("/suggest", async (req, res) => {
  const { keyword } = req.query;
  if (!keyword) return res.json([]);

  try {
    const rows = await query(
      "SELECT name FROM products WHERE name LIKE ? LIMIT 10",
      [`%${keyword}%`],
    );
    res.json(rows.map((row) => row.name));
  } catch (err) {
    console.error("‚ùå L·ªói khi t√¨m g·ª£i √Ω:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});

//
// üîí L∆ØU B·ªò L·ªåC Y√äU TH√çCH
// POST /api/products/filters/save
//
router.post("/filters/save", verifyToken, async (req, res) => {
  const { user_id } = req.user;
  const { name, filter } = req.body;

  if (!name || !filter) {
    return res.status(400).json({ error: "Thi·∫øu t√™n ho·∫∑c d·ªØ li·ªáu b·ªô l·ªçc" });
  }

  try {
    await query(
      "INSERT INTO favorite_filters (user_id, name, filter_data) VALUES (?, ?, ?)",
      [user_id, name, JSON.stringify(filter)],
    );
    res.status(201).json({ message: "ƒê√£ l∆∞u b·ªô l·ªçc" });
  } catch (err) {
    console.error("‚ùå L·ªói l∆∞u b·ªô l·ªçc:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l∆∞u b·ªô l·ªçc" });
  }
});

//
// üîí L·∫§Y DANH S√ÅCH B·ªò L·ªåC
// GET /api/products/filters
//
router.get("/filters", verifyToken, async (req, res) => {
  const { user_id } = req.user;

  try {
    const rows = await query(
      "SELECT id, name, filter_data FROM favorite_filters WHERE user_id = ? ORDER BY id DESC",
      [user_id],
    );

    res.json(
      rows.map((row) => ({
        id: row.id,
        name: row.name,
        filter: JSON.parse(row.filter_data),
      })),
    );
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y b·ªô l·ªçc ƒë√£ l∆∞u:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch b·ªô l·ªçc" });
  }
});

//
// üì¶ L·∫§Y CHI TI·∫æT S·∫¢N PH·∫®M
// GET /api/products/:id
//
router.get("/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const rows = await query("SELECT * FROM products WHERE id = ?", [id]);
    if (rows.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }
    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});

//
// ‚úÖ TH√äM S·∫¢N PH·∫®M (Admin)
// POST /api/products
//
router.post("/", verifyToken, async (req, res) => {
  console.log("üßæ req.body g·ª≠i l√™n:", req.body);
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn" });
  }
  const {
    name,
    price,
    description,
    image,
    images = [],
    sizes = [],
    colors = [],
    stock = 0,
  } = req.body;

  try {
    const result = await query(
      `INSERT INTO products (name, price, description, image, images, sizes, colors, stock)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        name,
        price,
        description,
        image,
        JSON.stringify(images || []),
        JSON.stringify(sizes || []),
        JSON.stringify(colors || []),
        stock || 0,
      ],
    );

    res.status(201).json({ id: result.insertId, message: "ƒê√£ th√™m s·∫£n ph·∫©m" });
  } catch (err) {
    console.error("‚ùå L·ªói th√™m s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m" });
  }
});

//
// ‚úÖ C·∫¨P NH·∫¨T S·∫¢N PH·∫®M
// PUT /api/products/:id
//
router.put("/:id", verifyToken, async (req, res) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn" });
  }

  const { id } = req.params;
  const { name, price, description, image, images, sizes, colors, stock } =
    req.body;

  try {
    await query(
      `UPDATE products SET name=?, price=?, description=?, image=?, images=?, sizes=?, colors=?, stock=? WHERE id=?`,
      [
        name,
        price,
        description,
        image,
        JSON.stringify(images || []),
        JSON.stringify(sizes || []),
        JSON.stringify(colors || []),
        stock || 0,
        id,
      ],
    );

    res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  }
});

//
// ‚úÖ XO√Å S·∫¢N PH·∫®M
// DELETE /api/products/:id
//
router.delete("/:id", verifyToken, async (req, res) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn" });
  }

  const { id } = req.params;

  try {
    await query("DELETE FROM products WHERE id = ?", [id]);
    res.json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m" });
  } catch (err) {
    console.error("‚ùå L·ªói xo√° s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m" });
  }
});

export default router;
