import express from "express";
import db from "../db.js";
import verifyToken from "../middleware/verifyToken.js";

const router = express.Router();

//
// üì¶ L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ S·∫¢N PH·∫®M (route ch√≠nh)
// GET /api/products
//
router.get("/", async (_req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM products ORDER BY id DESC");
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m" });
  }
});

//
// üîç G·ª¢I √ù T√åM KI·∫æM S·∫¢N PH·∫®M
// GET /api/products/suggest?keyword=ao
//
router.get("/suggest", async (req, res) => {
  const { keyword } = req.query;
  if (!keyword) return res.json([]);

  try {
    const [rows] = await db.query(
      "SELECT name FROM products WHERE name LIKE ? LIMIT 10",
      [`%${keyword}%`],
    );
    const suggestions = rows.map((row) => row.name);
    res.json(suggestions);
  } catch (err) {
    console.error("‚ùå L·ªói khi t√¨m g·ª£i √Ω:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});

//
// üîí L∆ØU B·ªò L·ªåC Y√äU TH√çCH
// POST /api/products/filters/save
//
router.post("/filters/save", verifyToken, async (req, res) => {
  const { user_id } = req.user;
  const { name, filter } = req.body;

  if (!name || !filter) {
    return res.status(400).json({ error: "Thi·∫øu t√™n ho·∫∑c d·ªØ li·ªáu b·ªô l·ªçc" });
  }

  try {
    await db.query(
      "INSERT INTO favorite_filters (user_id, name, filter_data) VALUES (?, ?, ?)",
      [user_id, name, JSON.stringify(filter)],
    );
    res.status(201).json({ message: "ƒê√£ l∆∞u b·ªô l·ªçc" });
  } catch (err) {
    console.error("‚ùå L·ªói l∆∞u b·ªô l·ªçc:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l∆∞u b·ªô l·ªçc" });
  }
});

//
// üîí L·∫§Y DANH S√ÅCH B·ªò L·ªåC ƒê√É L∆ØU
// GET /api/products/filters
//
router.get("/filters", verifyToken, async (req, res) => {
  const { user_id } = req.user;

  try {
    const [rows] = await db.query(
      "SELECT id, name, filter_data FROM favorite_filters WHERE user_id = ? ORDER BY id DESC",
      [user_id],
    );

    const filters = rows.map((row) => ({
      id: row.id,
      name: row.name,
      filter: JSON.parse(row.filter_data),
    }));

    res.json(filters);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y b·ªô l·ªçc ƒë√£ l∆∞u:", err);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch b·ªô l·ªçc" });
  }
});

export default router;
